function [err,model,errT] = sinusoidalreg(x,y,k,xT,yT)
%
% Finds a D-1 order Sinusoidal fit to the data
%
%    function [err,model,errT] = polyreg(x,y,D,xT,yT)
% Inputs:
%   - x = vector of input scalars for training
%   - y = vector of output scalars for training
%   - k = (k -1) the number of harmonics to use for this function
%   - xT = vector of input scalars for testing
%   - yT = vector of output scalars for testing
% Outputs: 
%   - err = average squared loss on training
%   - model = vector of polynomial parameter coefficients
%   - errT = average squared loss on testing


% For this section when we have k = 0 then we have cos(0) = 1, which is
% simply the bias of the function
% Create two matrices to hold the values for the cos and sin basis
% functions


xcos = zeros(length(x),k);
xsin = zeros(length(x),k);
for i=1:k
  xcos(:,i) = cos((k-1)*x);
  xsin(:,i) = sin((k-1)*x);
end
xboth = [xcos xsin];
model = pinv(xboth)*y;
err   = (1/(2*length(x)))*sum((y-xboth*model).^2);

if (nargin==5)
  xxT = zeros(length(xT),D);
  for i=1:D
    xxT(:,i) = xT.^(D-i);
  end
  errT  = (1/(2*length(xT)))*sum((yT-xxT*model).^2);
end

q  = (min(x):(max(x)/300):max(x))';
qcos = zeros(length(q),k);
qsin = zeros(length(q),k);
for i=1:D
  qcos(:,i) = cos((k-1)*x;
  qsin(:,1) = sin((k-1)*x;
end
qboth = [qcos qsin]

% Open up a new figure
figure

%clf
plot(x,y,'X');
%hold on
if (nargin==5)
plot(xT,yT,'cO');
end
plot(q,qboth*model,'r')

% This section controls the output of the function
